{"version":3,"sources":["webpack:///./src/pages/videos.tsx"],"names":["Title","styled","H3","attrs","pb","_templateObject","Description","H4","color","_templateObject2","VideoBox","Box","_templateObject3","VideosGrid","Grid","spacing","numCols","_templateObject4","Videos","_ref","data","sources","_","get","react__WEBPACK_IMPORTED_MODULE_0__","_components_Layout__WEBPACK_IMPORTED_MODULE_3__","elements","render","_ref2","title","description","url","_components_UI__WEBPACK_IMPORTED_MODULE_4__","getHeight","width","query"],"mappings":"6dAUA,IAAMA,EAAQC,kBAAOC,MAAIC,MAAM,CAC7BC,GAAI,GADQH,CAAHI,KAILC,EAAcL,kBAAOM,MAAIJ,MAAM,CACnCC,GAAI,CAAC,EAAG,GACRI,MAAO,QAFWP,CAAHQ,KAKXC,EAAWT,kBAAOU,OAAKR,MAAM,CACjCC,GAAI,CAAC,EAAG,IADOH,CAAHW,KAMRC,EAAaZ,kBAAOa,QAAMX,MAAM,CACpCY,QAAS,CAAC,EAAG,EAAG,GAChBC,QAAS,CAAC,EAAG,IAFIf,CAAHgB,KAoDDC,UA/CA,SAAAC,GAA+B,IAA5BC,EAA4BD,EAA5BC,KACVC,EAAUC,IAAEC,IAChBH,EACA,wDACA,IAEF,OACEI,EAAA,cAACC,EAAA,EAAD,KACED,EAAA,cAACX,EAAD,CACEa,SAAUL,EACVM,OAAQ,SAAAC,GAQF,IAPJC,EAOID,EAPJC,MACAC,EAMIF,EANJE,YACAC,EAKIH,EALJG,IAMA,OACEP,EAAA,cAACd,EAAD,KACEc,EAAA,cAACxB,EAAD,KAAQ6B,GACRL,EAAA,cAAClB,EAAD,KAAcwB,GACdN,EAAA,cAACQ,EAAA,OAAD,CACED,IAAKA,EACLF,MAAOA,EACPI,UAAW,SAACC,GAAD,OAAmBA,GAjCzB,IAAM,aAwDpB,IAAMC,EAAK","file":"component---src-pages-videos-tsx-1bb9ad77f76b0deaf7ce.js","sourcesContent":["import * as React from 'react'\nimport _ from 'lodash'\nimport { graphql } from 'gatsby'\nimport styled from 'styled-components'\n\nimport { Query } from '@generated/graphql'\n\nimport Layout from '@components/Layout'\nimport { Grid, Box, IFrame, H3, H4 } from '@components/UI'\n\nconst Title = styled(H3).attrs({\n  pb: 1\n})``\n\nconst Description = styled(H4).attrs({\n  pb: [2, 3],\n  color: 'dark'\n})``\n\nconst VideoBox = styled(Box).attrs({\n  pb: [2, 3]\n})``\n\nconst ASPECT_RATIO = 121 / 68\n\nconst VideosGrid = styled(Grid).attrs({\n  spacing: [2, 3, 3],\n  numCols: [1, 2]\n})``\n\nconst Videos = ({ data }: { data: Query }) => {\n  const sources = _.get(\n    data,\n    'allMarkdownRemark.nodes[0].frontmatter.youtubeSources',\n    []\n  )\n  return (\n    <Layout>\n      <VideosGrid\n        elements={sources}\n        render={({\n          title,\n          description,\n          url\n        }: {\n          title: string\n          description: string\n          url: string\n        }) => {\n          return (\n            <VideoBox>\n              <Title>{title}</Title>\n              <Description>{description}</Description>\n              <IFrame\n                url={url}\n                title={title}\n                getHeight={(width: number) => width / ASPECT_RATIO}\n              />\n            </VideoBox>\n          )\n        }}\n      />\n    </Layout>\n  )\n}\n\n/* STODO pass iframe additional props to IFrame?\n<iframe\n  width=\"100%\"\n  title={title}\n  src={url}\n  allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n  allowFullScreen\n  style={{ border: 'none' }}\n/>\n*/\n\nexport default Videos\n\nexport const query = graphql`\n  {\n    allMarkdownRemark(\n      filter: { fileAbsolutePath: { regex: \"/content.videos.md/\" } }\n    ) {\n      nodes {\n        frontmatter {\n          youtubeSources {\n            url\n            title\n            description\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}