{"version":3,"sources":["webpack:///./src/pages/press.tsx"],"names":["Title","styled","UI","H3","attrs","pb","withConfig","displayName","componentId","Description","color","GLink","PressBox","Box","mb","borderStyle","borderWidth","borderTop","borderX","borderColor","Review","_ref","title","by","path","react__WEBPACK_IMPORTED_MODULE_2__","_components_UI__WEBPACK_IMPORTED_MODULE_6__","to","Press","_ref2","nodes","data","allMarkdownRemark","_components_Layout__WEBPACK_IMPORTED_MODULE_5__","_","map","_ref3","absolutePath","fileAbsolutePath","_ref3$frontmatter","frontmatter","match","replace","query"],"mappings":"2MASMA,EAAQC,kBAAOC,UAAGC,IAAIC,MAAM,CAChCC,GAAI,IADKC,WAAA,CAAAC,YAAA,eAAAC,YAAA,YAAGP,CAAH,MAILQ,EAAcR,kBAAOC,UAAGC,IAAIC,MAAM,CACtCM,MAAO,YADQJ,WAAA,CAAAC,YAAA,qBAAAC,YAAA,YAAGP,CAAH,MAIXU,EAAQV,kBAAOC,UAAGS,OAAbL,WAAA,CAAAC,YAAA,eAAAC,YAAA,YAAGP,CAAH,MAOLW,EAAWX,kBAAOY,OAAKT,MAAM,CACjCC,GAAI,EACJS,GAAI,EACJC,YAAa,QACbC,YAAa,EACbC,UAAW,EACXC,QAAS,EACTC,YAAa,SAPDb,WAAA,CAAAC,YAAA,kBAAAC,YAAA,YAAGP,CAAH,MAeRmB,EAAS,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,MAAOC,EAAVF,EAAUE,GAAIC,EAAdH,EAAcG,KAAd,OACbC,EAAA,cAACC,EAAA,IAAD,KACED,EAAA,cAACd,EAAD,CAAOgB,GAAIH,GACTC,EAAA,cAACb,EAAD,KACEa,EAAA,cAACzB,EAAD,KAAQsB,GACRG,EAAA,cAAChB,EAAD,KAAcc,OAkBPK,UAZD,SAAAC,GAA+B,IACrCC,EADqCD,EAA5BE,KACIC,kBAAkBF,MAErC,OACEL,EAAA,cAACQ,EAAA,EAAD,KACGC,IAAEC,IAAIL,EAAO,SAAAM,GAAA,IArCHC,EAqCMC,EAAHF,EAAGE,iBAAHC,EAAAH,EAAqBI,YAAelB,EAApCiB,EAAoCjB,MAAOC,EAA3CgB,EAA2ChB,GAA3C,OACZE,EAAA,cAACL,EAAD,CAAQE,MAAOA,EAAOC,GAAIA,EAAIC,MAtCrBa,EAsCmCC,EArClDD,EACGI,MAAM,gBAAgB,GACtBC,QAAQ,UAAW,IACnBA,QAAQ,QAAS,WA0Cf,IAAMC,EAAK","file":"component---src-pages-press-tsx-4077875af00f4a08470a.js","sourcesContent":["import * as React from 'react'\nimport _ from 'lodash'\nimport styled from 'styled-components'\nimport { graphql } from 'gatsby'\n\nimport Layout from '@components/Layout'\nimport UI, { Box } from '@components/UI'\nimport { Query } from '@generated/graphql'\n\nconst Title = styled(UI.H3).attrs({\n  pb: 1\n})``\n\nconst Description = styled(UI.H3).attrs({\n  color: 'primary'\n})``\n\nconst GLink = styled(UI.GLink)``\nconst getPath = (absolutePath: string) =>\n  absolutePath\n    .match(/press.*\\.md$/)[0]\n    .replace(/[0-9]._/, '')\n    .replace(/\\..*$/, '')\n\nconst PressBox = styled(Box).attrs({\n  pb: 4,\n  mb: 4,\n  borderStyle: 'solid',\n  borderWidth: 0,\n  borderTop: 0,\n  borderX: 0,\n  borderColor: 'gray'\n})``\n\ntype ReviewProps = {\n  title: string\n  by: string\n  path: string\n}\nconst Review = ({ title, by, path }: ReviewProps) => (\n  <Box>\n    <GLink to={path}>\n      <PressBox>\n        <Title>{title}</Title>\n        <Description>{by}</Description>\n      </PressBox>\n    </GLink>\n  </Box>\n)\n\nconst Press = ({ data }: { data: Query }) => {\n  const nodes = data.allMarkdownRemark.nodes\n\n  return (\n    <Layout>\n      {_.map(nodes, ({ fileAbsolutePath, frontmatter: { title, by } }) => (\n        <Review title={title} by={by} path={getPath(fileAbsolutePath)} />\n      ))}\n    </Layout>\n  )\n}\n\nexport default Press\n\nexport const query = graphql`\n  {\n    allMarkdownRemark(\n      filter: { fileAbsolutePath: { regex: \"/content.press/\" } }\n      sort: { fields: fileAbsolutePath, order: ASC }\n    ) {\n      nodes {\n        fileAbsolutePath\n        frontmatter {\n          title\n          by\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}