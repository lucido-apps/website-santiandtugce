{"version":3,"sources":["webpack:///./src/pages/events.tsx"],"names":["Date","styled","H4","attrs","pb","color","withConfig","displayName","componentId","CityCountry","Time","Description","mb","Link","UI","fontFamily","EventBox","Box","borderStyle","borderWidth","borderTop","borderX","borderColor","Event","_ref","_ref$event","event","dateObj","venue","city","country","link","react__WEBPACK_IMPORTED_MODULE_1__","href","dateFns","format","react_icons_md__WEBPACK_IMPORTED_MODULE_4__","_components_UI__WEBPACK_IMPORTED_MODULE_8__","style","verticalAlign","react_icons_fa__WEBPACK_IMPORTED_MODULE_3__","Events","_ref2","data","events","_","chain","allMarkdownRemark","nodes","frontmatter","map","_ref3","date","time","parse","partition","_ref4","isPast","value","pastEvents","upcomingEvents","_components_Layout__WEBPACK_IMPORTED_MODULE_7__","query"],"mappings":"oOAcMA,EAAOC,kBAAOC,MAAIC,MAAM,CAC5BC,GAAI,EACJC,MAAO,UAFCC,WAAA,CAAAC,YAAA,eAAAC,YAAA,gBAAGP,CAAH,+BAOJQ,EAAcR,kBAAOC,MAAIC,MAAM,CACnCE,MAAO,UACPD,GAAI,IAFWE,WAAA,CAAAC,YAAA,sBAAAC,YAAA,gBAAGP,CAAH,+BAOXS,EAAOT,kBAAOC,MAAIC,MAAM,CAC5BE,MAAO,OACPD,GAAI,IAFIE,WAAA,CAAAC,YAAA,eAAAC,YAAA,gBAAGP,CAAH,+BAOJU,EAAcV,kBAAOC,MAAIC,MAAM,CACnCS,GAAI,EACJP,MAAO,SAFQC,WAAA,CAAAC,YAAA,sBAAAC,YAAA,gBAAGP,CAAH,MAKXY,EAAOZ,kBAAOa,UAAGD,MAAMV,MAAM,CACjCY,WAAY,SADJT,WAAA,CAAAC,YAAA,eAAAC,YAAA,gBAAGP,CAAH,MAIJe,EAAWf,kBAAOgB,OAAKd,MAAM,CACjCC,GAAI,EACJQ,GAAI,EACJM,YAAa,QACbC,YAAa,EACbC,UAAW,EACXC,QAAS,EACTC,YAAa,SAPDhB,WAAA,CAAAC,YAAA,mBAAAC,YAAA,gBAAGP,CAAH,MAURsB,EAAQ,SAAAC,GAAA,IAAAC,EAAAD,EAAGE,MAASC,EAAZF,EAAYE,QAASC,EAArBH,EAAqBG,MAAOC,EAA5BJ,EAA4BI,KAAMC,EAAlCL,EAAkCK,QAASC,EAA3CN,EAA2CM,KAA3C,OACZC,EAAA,cAACnB,EAAD,CAAMoB,KAAMF,GACVC,EAAA,cAAChB,EAAD,KACEgB,EAAA,cAAChC,EAAD,KAAOkC,IAAQC,OAAOR,EAAS,oBAC/BK,EAAA,cAACvB,EAAD,KAAiBoB,EAAjB,KAA0BC,GAC1BE,EAAA,cAACtB,EAAD,KACEsB,EAAA,cAACI,EAAA,EAAD,MADF,IAEOF,IAAQC,OAAOR,EAAS,WAE/BK,EAAA,cAACK,EAAA,IAAD,KACEL,EAAA,cAACrB,EAAD,KACEqB,EAAA,cAACI,EAAA,EAAD,CAAcE,MAAO,CAAEC,cAAe,UADxC,IAEOX,IAIRG,EACCC,EAAA,cAACrB,EAAD,KACEqB,EAAA,cAACQ,EAAA,EAAD,MADF,IAEOT,GAEL,QAgCKU,UA3BA,SAAAC,GAA+B,IAA5BC,EAA4BD,EAA5BC,KACVC,EAASC,IAAEC,MAAMH,EAAKI,kBAAkBC,MAAM,GAAGC,YAAYL,QAChEM,IAAI,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAMC,EAATF,EAASE,KAAMzB,EAAfuB,EAAevB,MAAOC,EAAtBsB,EAAsBtB,KAAMC,EAA5BqB,EAA4BrB,QAASC,EAArCoB,EAAqCpB,KAArC,MAAiD,CACpDJ,QAASO,IAAQoB,MAASF,EAAjB,IAAyBC,GAClCzB,QACAC,OACAC,UACAC,UAEDwB,UAAU,SAAAC,GAAA,IAAG7B,EAAH6B,EAAG7B,QAAH,OAAiBO,IAAQuB,OAAO9B,KAC1C+B,QAEGC,EAAaf,EAAO,GACpBgB,EAAiBhB,EAAO,GAE9B,OACEZ,EAAA,cAAC6B,EAAA,EAAD,KACGhB,IAAEK,IAAIU,EAAgB,SAAAlC,GAAK,OAC1BM,EAAA,cAACT,EAAD,CAAOG,MAAOA,MAEfmB,IAAEK,IAAIS,EAAY,SAAAjC,GAAK,OACtBM,EAAA,cAACT,EAAD,CAAOG,MAAOA,QAQf,IAAMoC,EAAK","file":"component---src-pages-events-tsx-f768f751e4733509d3ca.js","sourcesContent":["import * as React from 'react'\nimport _ from 'lodash'\nimport { FaExternalLinkAlt, FaMapMarker } from 'react-icons/fa'\nimport { MdLocationOn, MdAccessTime } from 'react-icons/md'\nimport dateFns from 'date-fns'\nimport styled from 'styled-components'\nimport { graphql } from 'gatsby'\n\nimport Layout from '@components/Layout'\nimport UI, { Box, H4 } from '@components/UI'\nimport { Query } from '@generated/graphql'\n\nimport { Theme } from '../style/theme'\n\nconst Date = styled(H4).attrs({\n  pb: 1,\n  color: 'black'\n})`\n  text-transform: uppercase;\n`\n\nconst CityCountry = styled(H4).attrs({\n  color: 'primary',\n  pb: 3\n})`\n  text-transform: uppercase;\n`\n\nconst Time = styled(H4).attrs({\n  color: 'dark',\n  pb: 1\n})`\n  text-transform: uppercase;\n`\n\nconst Description = styled(H4).attrs({\n  mb: 1,\n  color: 'dark'\n})``\n\nconst Link = styled(UI.Link).attrs({\n  fontFamily: 'sans'\n})``\n\nconst EventBox = styled(Box).attrs({\n  pb: 4,\n  mb: 4,\n  borderStyle: 'solid',\n  borderWidth: 0,\n  borderTop: 0,\n  borderX: 0,\n  borderColor: 'gray'\n})``\n\nconst Event = ({ event: { dateObj, venue, city, country, link } }) => (\n  <Link href={link}>\n    <EventBox>\n      <Date>{dateFns.format(dateObj, 'ddd, D MMM YYYY')}</Date>\n      <CityCountry>{`${city}, ${country}`}</CityCountry>\n      <Time>\n        <MdAccessTime />\n        {` ${dateFns.format(dateObj, 'h:mm A')}`}\n      </Time>\n      <Box>\n        <Description>\n          <MdLocationOn style={{ verticalAlign: 'left' }} />\n          {` ${venue}`}\n        </Description>\n      </Box>\n\n      {link ? (\n        <Description>\n          <FaExternalLinkAlt />\n          {` ${link}`}\n        </Description>\n      ) : null}\n    </EventBox>\n  </Link>\n)\n\nconst Events = ({ data }: { data: Query }) => {\n  const events = _.chain(data.allMarkdownRemark.nodes[0].frontmatter.events)\n    .map(({ date, time, venue, city, country, link }) => ({\n      dateObj: dateFns.parse(`${date} ${time}`),\n      venue,\n      city,\n      country,\n      link\n    }))\n    .partition(({ dateObj }) => dateFns.isPast(dateObj))\n    .value()\n\n  const pastEvents = events[0]\n  const upcomingEvents = events[1]\n\n  return (\n    <Layout>\n      {_.map(upcomingEvents, event => (\n        <Event event={event} />\n      ))}\n      {_.map(pastEvents, event => (\n        <Event event={event} />\n      ))}\n    </Layout>\n  )\n}\n\nexport default Events\n\nexport const query = graphql`\n  {\n    allMarkdownRemark(\n      filter: { fileAbsolutePath: { regex: \"/content.events/\" } }\n    ) {\n      nodes {\n        frontmatter {\n          events {\n            date\n            time\n            venue\n            city\n            country\n            link\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}